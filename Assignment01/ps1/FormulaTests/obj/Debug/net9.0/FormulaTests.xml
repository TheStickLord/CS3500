<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FormulaTests</name>
    </assembly>
    <members>
        <member name="T:CS3500.FormulaTests.FormulaSyntaxTests">
            <summary>
              <para>
                The following class shows the basics of how to use the MSTest framework,
                including:
              </para>
              <list type="number">
                <item> How to catch exceptions. </item>
                <item> How a test of valid code should look. </item>
              </list>
            </summary>
        </member>
        <member name="M:CS3500.FormulaTests.FormulaSyntaxTests.FormulaConstructor_TestNoTokens_Invalid">
            <summary>
              <para>
                This test makes sure the right kind of exception is thrown
                when trying to create a formula with no tokens.
              </para>
            </summary>
        </member>
        <member name="M:CS3500.FormulaTests.FormulaSyntaxTests.FormulaConstructor_TestNumericToken_Valid">
            <summary>
              <para>
                Tests whether a valid numeric character will pass in the constructor
              </para>
            </summary>
        </member>
        <member name="M:CS3500.FormulaTests.FormulaSyntaxTests.FormulaConstructor_TestSingleInvalidToken_Invalid(System.String)">
            <summary>
              <para>
                This test makes sure the right kind of exception is thrown
                when trying to create a formula with no invalid tokens.
              </para>
              <param name="token">Invalid token to be tested</param>
            </summary>
        </member>
        <member name="M:CS3500.FormulaTests.FormulaSyntaxTests.FormulaConstructor_TestValidTokens_Valid(System.String)">
            <summary>
              <para>
                This test makes sure no exception is thrown when a valid character(s) are presented.
              </para>
              <remarks>
                I tried to maintain simple and valid syntax when testing for +, -, /, *, (, and ) validity to ensure that the formulas would not trigger other rules.
              </remarks>
              <param name="formula">Valid formula to be tested</param>
            </summary>
        </member>
        <member name="M:CS3500.FormulaTests.FormulaSyntaxTests.FormulaConstructor_TestGreaterClosingAmount_Invalid(System.String)">
            <summary>
              <para>
                This test makes sure an exception is thrown when there are more closing paranthesis than opening paranthesis.
              </para>
              <remarks>
                I have tried to keep the formulas as syntatically correct as possible
              </remarks>
              <param name="formula">Inavlid formula to be tested</param>
            </summary>
        </member>
        <member name="M:CS3500.FormulaTests.FormulaSyntaxTests.FormulaConstructor_TestBalancedParanthesis_Valid(System.String)">
            <summary>
              <para>
                This test makes sure no exception is thrown when a balenced paratheses formula is passed.
              </para>
              <param name="formula">Valid formula to be tested</param>
            </summary>
        </member>
        <member name="M:CS3500.FormulaTests.FormulaSyntaxTests.FormulaConstructor_TestUnbalancedParanthesis_Invalid(System.String)">
            <summary>
              <para>
                This test makes sure an exception is thrown when a non-balenced paratheses formula is passed.
              </para>
              <param name="formula">Invalid formula to be tested</param>
            </summary>
        </member>
        <member name="M:CS3500.FormulaTests.FormulaSyntaxTests.FormulaConstructor_TestFirstToken_Valid(System.String)">
            <summary>
              <para>
                Makes sure that a formula with a valid first token passes the constructor
              </para>
              <param name="formula">Valid formula to be tested</param>
            </summary>
        </member>
        <member name="M:CS3500.FormulaTests.FormulaSyntaxTests.FormulaConstructor_TestFirstTokenNumber_Invalid(System.String)">
            <summary>
              <para>
                Makes sure that a formula with an invalid first token throws a FormulaFormatException.
              </para>
              <param name="formula">Invalid formula to be tested</param>
            </summary>
        </member>
        <member name="M:CS3500.FormulaTests.FormulaSyntaxTests.FormulaConstructor_TestLastToken_Valid(System.String)">
            <summary>
              <para>
                Makes sure that a formula with a valid last token passes the constructor.
              </para>
              <param name="formula">Valid formula to be tested</param>
            </summary>
        </member>
        <member name="M:CS3500.FormulaTests.FormulaSyntaxTests.FormulaConstructor_TestLastToken_Invalid(System.String)">
            <summary>
              <para>
                Makes sure that a formula with an invalid last token throws a FormulaFormatException.
              </para>
              <param name="formula">Invalid formula to be tested</param>
            </summary>
        </member>
        <member name="M:CS3500.FormulaTests.FormulaSyntaxTests.FormulaConstructor_TestParenthesesFollowingToken_Valid(System.String)">
            <summary>
              <para>
                Makes sure that a formula with a valid token following '(' passes the constructor.
              </para>
              <param name="formula">Valid formula to be tested</param>
            </summary>
        </member>
        <member name="M:CS3500.FormulaTests.FormulaSyntaxTests.FormulaConstructor_TestParenthesesFollowingToken_Invalid(System.String)">
            <summary>
              <para>
                Makes sure that a formula with an invalid token following '(' throws a FormulaFormatException.
              </para>
              <param name="formula">Invalid formula to be tested</param>
            </summary>
        </member>
        <member name="M:CS3500.FormulaTests.FormulaSyntaxTests.FormulaConstructor_TestExtraFollowingToken_Valid(System.String)">
            <summary>
              <para>
                Makes sure that a formula with a valid token following any number/variable/')' passes the constructor.
              </para>
              <param name="formula">Valid formula to be tested</param>
            </summary>
        </member>
        <member name="M:CS3500.FormulaTests.FormulaSyntaxTests.FormulaConstructor_TestExtraFollowingToken_Invalid(System.String)">
            <summary>
              <para>
                Makes sure that a formula with an invalid token following any number/variable/')' throws a FormulaFormatException.
              </para>
              <param name="formula">Invalid formula to be tested</param>
            </summary>
        </member>
    </members>
</doc>
